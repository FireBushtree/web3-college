{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-8df0412ed6282b4b81c68bd779e38e42aaa976f5",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/CourseRegistry.sol": "project/contracts/CourseRegistry.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/CourseRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract CourseRegistry is Ownable {\n    struct Course {\n        uint256 price;\n        address creator;\n        address[] students;\n    }\n\n    IERC20 public owcToken;\n    mapping(string => Course) public courses;\n\n    // 奖励池相关\n    uint256 public rewardPool;  // 合约内的奖励池余额\n    uint256 public constant COMPLETION_REWARD = 50;  // 完成课程奖励 50 OWC\n    mapping(string => mapping(address => bool)) public courseCompleted; // 课程完成状态\n    mapping(address => uint256) public totalRewardsEarned; // 学生总奖励记录\n\n    event CoursePurchased(string courseName, address indexed student, uint256 price);\n    event CourseCreated(string courseName, address indexed creator, uint256 price);\n    event CourseCompleted(string courseName, address indexed student, uint256 reward);\n    event RewardPoolFunded(address indexed funder, uint256 amount);\n    event RewardPoolWithdrawn(address indexed admin, uint256 amount);\n\n    constructor(address _owcTokenAddress) Ownable(msg.sender) {\n        owcToken = IERC20(_owcTokenAddress);\n        rewardPool = 0; // 初始化奖励池为0\n    }\n\n    function createCourse(string memory courseName, uint256 price) external {\n        require(price > 0, \"Price must be greater than 0\");\n        require(courses[courseName].price == 0, \"Course already exists\");\n\n        courses[courseName].price = price;\n        courses[courseName].creator = msg.sender;\n        courses[courseName].students.push(msg.sender);\n\n        emit CourseCreated(courseName, msg.sender, price);\n    }\n\n    function purchaseCourse(string memory courseName) external {\n        Course storage course = courses[courseName];\n        require(course.price > 0, \"Course does not exist\");\n        require(owcToken.balanceOf(msg.sender) >= course.price, \"Insufficient OWC balance\");\n        require(owcToken.allowance(msg.sender, address(this)) >= course.price, \"Insufficient allowance\");\n\n        bool success = owcToken.transferFrom(msg.sender, course.creator, course.price);\n        require(success, \"Token transfer failed\");\n\n        course.students.push(msg.sender);\n        emit CoursePurchased(courseName, msg.sender, course.price);\n    }\n\n    function getCourseStudents(string memory courseName) external view returns (address[] memory) {\n        return courses[courseName].students;\n    }\n\n    function hasPurchased(string memory courseName, address student) external view returns (bool) {\n        address[] memory students = courses[courseName].students;\n        for (uint i = 0; i < students.length; i++) {\n            if (students[i] == student) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function getCoursePrice(string memory courseName) external view returns (uint256) {\n        return courses[courseName].price;\n    }\n\n    function getCourseCreator(string memory courseName) external view returns (address) {\n        return courses[courseName].creator;\n    }\n\n    // 奖励池管理功能\n    function fundRewardPool(uint256 amount) external onlyOwner {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(owcToken.balanceOf(msg.sender) >= amount, \"Insufficient balance\");\n        require(owcToken.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\n\n        bool success = owcToken.transferFrom(msg.sender, address(this), amount);\n        require(success, \"Transfer failed\");\n\n        rewardPool += amount;\n        emit RewardPoolFunded(msg.sender, amount);\n    }\n\n    function withdrawFromRewardPool(uint256 amount) external onlyOwner {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(rewardPool >= amount, \"Insufficient reward pool balance\");\n\n        bool success = owcToken.transfer(msg.sender, amount);\n        require(success, \"Transfer failed\");\n\n        rewardPool -= amount;\n        emit RewardPoolWithdrawn(msg.sender, amount);\n    }\n\n    // 学生完成课程功能\n    function completeCourse(string memory courseName) external {\n        Course storage course = courses[courseName];\n        require(course.price > 0, \"Course does not exist\");\n        require(_hasPurchased(courseName, msg.sender), \"You must purchase the course first\");\n        require(!courseCompleted[courseName][msg.sender], \"Course already completed\");\n        require(rewardPool >= COMPLETION_REWARD, \"Insufficient reward pool\");\n\n        // 标记课程为已完成\n        courseCompleted[courseName][msg.sender] = true;\n\n        // 更新学生总奖励记录\n        totalRewardsEarned[msg.sender] += COMPLETION_REWARD;\n\n        // 从奖励池转移代币给学生\n        rewardPool -= COMPLETION_REWARD;\n        bool success = owcToken.transfer(msg.sender, COMPLETION_REWARD);\n        require(success, \"Reward transfer failed\");\n\n        emit CourseCompleted(courseName, msg.sender, COMPLETION_REWARD);\n    }\n\n    // 内部函数\n    function _hasPurchased(string memory courseName, address student) internal view returns (bool) {\n        address[] memory students = courses[courseName].students;\n        for (uint i = 0; i < students.length; i++) {\n            if (students[i] == student) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // 查询功能\n    function hasCourseCompleted(string memory courseName, address student) external view returns (bool) {\n        return courseCompleted[courseName][student];\n    }\n\n    function getStudentTotalRewards(address student) external view returns (uint256) {\n        return totalRewardsEarned[student];\n    }\n\n    function getRewardPool() external view returns (uint256) {\n        return rewardPool;\n    }\n\n    function getCompletedStudents(string memory courseName) external view returns (address[] memory) {\n        Course storage course = courses[courseName];\n        address[] memory students = course.students;\n\n        // 计算已完成的学生数量\n        uint256 completedCount = 0;\n        for (uint i = 0; i < students.length; i++) {\n            if (courseCompleted[courseName][students[i]]) {\n                completedCount++;\n            }\n        }\n\n        // 创建已完成学生数组\n        address[] memory completedStudents = new address[](completedCount);\n        uint256 index = 0;\n        for (uint i = 0; i < students.length; i++) {\n            if (courseCompleted[courseName][students[i]]) {\n                completedStudents[index] = students[i];\n                index++;\n            }\n        }\n\n        return completedStudents;\n    }\n}"
      }
    }
  }
}